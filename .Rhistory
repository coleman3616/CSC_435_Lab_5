library(tidyverse)
library(readr)
Lost_Sales <- read_csv("Lost Sales.csv")
View(Lost_Sales)
library(caret)
install.packages("questionr")
library(readr)
library(tidyverse)
library(dplyr)
library(caret)
library(questionr)
Lost_Sales$Status <- as.factor(Lost_Sales$Status)
set.seed(123)
training.samples <- Lost_Sales$Quote %>% createDataPartition(p = 0.8, list = FALSE)
train.data <- Lost_Sales[training.samples, ]
test.data <- Lost_Sales[-training.samples, ]
LR <- glm(Status ~ Quote, data = train.data, family = binomial)
summary(LR)
probabilities <- LR %>% predict(test.data, type = "response")
predicted.classes <- ifelse(probabilities > 0.5, "pos", "neg")
mean(predicted.classes == test.data$Quote)
mean(predicted.classes == test.data$Status)
probabilities <- LR %>% predict(test.data, type = "response")
odds.ratio(LR)
probabilities <- LR %>% predict(test.data, type = "response")
predicted.classes <- ifelse(probabilities > 0.5, "Won", "Lost")
mean(predicted.classes == test.data$Status)
accuracy <- mean(predicted.classes == test.data$Status)
error <- mean(predicted.classes != test.data$Status)
error
confusionMatrix(predicted.classes, test.data, positive = "Won")
confusionMatrix(predicted.classes, test.data$Status, positive = "Won")
confusionMatrix(predicted.classes, test.data$Status, positive = "Won")
observed.classes <- test.data$Status
confusionMatrix(predicted.classes, observed.classes, positive = "Won")
confusionMatrix(predicted.classes$Status, observed.classes, positive = "Won")
confusionMatrix(predicted.classes, observed.classes, positive = "Won")
predicted.classes <- as.factor(predicted.classes)
confusionMatrix(predicted.classes, observed.classes, positive = "Won")
LR2 <- glm(Status ~ `Time to Delivery`, data = train.data, family = binomial)
summary(LR2)
odds.ratio(LR2)
LR2 <- glm(Status ~ `Time to Delivery`, data = train.data, family = binomial)
summary(LR2)
odds.ratio(LR2)
probabilities2 <- LR2 %>% predict(test.data, type = "response")
predicted.classes2 <- ifelse(probabilities > 0.5, "Won", "Lost")
accuracy2 <- mean(predicted.classes2 == test.data$Status)
accuracy2
probabilities2 <- LR2 %>% predict(test.data, type = "response")
predicted.classes2 <- ifelse(probabilities2 > 0.5, "Won", "Lost")
accuracy2 <- mean(predicted.classes2 == test.data$Status)
accuracy2
error2 <- mean(predicted.classes2 != test.data$Status)
error2
observed.classes2 <- test.data$Status
predicted.classes2 <- as.factor(predicted.classes)
confusionMatrix(predicted.classes2, observed.classes2, positive = "Won")
predicted.classes2 <- as.factor(predicted.classes2)
confusionMatrix(predicted.classes2, observed.classes2, positive = "Won")
predicted.classes2 <- ifelse(probabilities2 > 0.5, "Won", "Lost")
accuracy2 <- mean(predicted.classes2 == test.data$Status)
accuracy2
error2 <- mean(predicted.classes2 != test.data$Status)
error2
observed.classes2 <- test.data$Status
predicted.classes2 <- as.factor(predicted.classes2)
confusionMatrix(predicted.classes2, observed.classes2, positive = "Won")
training.samples2 <- Lost_Sales$Quote %>% createDataPartition(p = 0.7, list = FALSE)
train.data2 <- Lost_Sales[training.samples, ]
test.data2 <- Lost_Sales[-training.samples, ]
LR3 <- glm(Status ~ Quote + `Time to Delivery` + `Part Type`, data = train.data, family = binomial)
summary(LR3)
odds.ratio(LR3)
LR3 <- glm(Status ~ Quote + `Time to Delivery` + `Part Type`, data = train.data2, family = binomial)
summary(LR3)
odds.ratio(LR3)
training.samples2 <- Lost_Sales$Quote %>% createDataPartition(p = 0.7, list = FALSE)
train.data2 <- Lost_Sales[training.samples2, ]
test.data2 <- Lost_Sales[-training.samples2, ]
LR3 <- glm(Status ~ Quote + `Time to Delivery` + `Part Type`, data = train.data2, family = binomial)
summary(LR3)
odds.ratio(LR3)
probabilities2 <- LR3 %>% predict(test.data2, type = "response")\
training.samples2 <- Lost_Sales$Quote %>% createDataPartition(p = 0.7, list = FALSE)
train.data2 <- Lost_Sales[training.samples2, ]
test.data2 <- Lost_Sales[-training.samples2, ]
LR3 <- glm(Status ~ Quote + `Time to Delivery` + `Part Type`, data = train.data2, family = binomial)
summary(LR3)
training.samples2 <- Lost_Sales$Status %>% createDataPartition(p = 0.7, list = FALSE)
train.data2 <- Lost_Sales[training.samples2, ]
test.data2 <- Lost_Sales[-training.samples2, ]
LR3 <- glm(Status ~ Quote + `Time to Delivery` + `Part Type`, data = train.data2, family = binomial)
summary(LR3)
odds.ratio(LR3)
probabilities2 <- LR3 %>% predict(test.data2, type = "response")\
training.samples <- Lost_Sales$Status %>% createDataPartition(p = 0.8, list = FALSE)
train.data <- Lost_Sales[training.samples, ]
test.data <- Lost_Sales[-training.samples, ]
LR1 <- glm(Status ~ Quote, data = train.data, family = binomial)
summary(LR1)
odds.ratio(LR1)
probabilities1 <- LR1 %>% predict(test.data, type = "response")
predicted.classes1 <- ifelse(probabilities > 0.5, "Won", "Lost")
accuracy <- mean(predicted.classes1 == test.data$Status)
accuracy <- mean(predicted.classes1 == test.data$Status)
training.samples <- Lost_Sales %>% createDataPartition(p = 0.8, list = FALSE)
training.samples <- Lost_Sales$Quote %>% createDataPartition(p = 0.8, list = FALSE)
train.data <- Lost_Sales[training.samples, ]
test.data <- Lost_Sales[-training.samples, ]
LR1 <- glm(Status ~ Quote, data = train.data, family = binomial)
summary(LR1)
odds.ratio(LR1)
probabilities1 <- LR1 %>% predict(test.data, type = "response")
predicted.classes1 <- ifelse(probabilities > 0.5, "Won", "Lost")
training.samples <- Lost_Sales$Status %>% createDataPartition(p = 0.8, list = FALSE)
train.data <- Lost_Sales[training.samples, ]
test.data <- Lost_Sales[-training.samples, ]
LR1 <- glm(Status ~ Quote, data = train.data, family = binomial)
summary(LR1)
odds.ratio(LR1)
probabilities1 <- LR1 %>% predict(test.data, type = "response")
predicted.classes1 <- ifelse(probabilities > 0.5, "Won", "Lost")
accuracy <- mean(predicted.classes1 == test.data$Status)
accuracy
error <- mean(predicted.classes != test.data$Status)
error
observed.classes <- test.data$Status
predicted.classes <- as.factor(predicted.classes)
confusionMatrix(predicted.classes, observed.classes, positive = "Won")
## Question 2
LR2 <- glm(Status ~ `Time to Delivery`, data = train.data, family = binomial)
summary(LR2)
odds.ratio(LR2)
probabilities2 <- LR2 %>% predict(test.data, type = "response")
predicted.classes2 <- ifelse(probabilities2 > 0.5, "Won", "Lost")
accuracy2 <- mean(predicted.classes2 == test.data$Status)
accuracy2
error2 <- mean(predicted.classes2 != test.data$Status)
error2
observed.classes2 <- test.data$Status
predicted.classes2 <- as.factor(predicted.classes2)
confusionMatrix(predicted.classes2, observed.classes2, positive = "Won")
LR1 <- glm(Status ~ Quote, data = train.data, family = binomial)
summary(LR1)
summary(LR1)
odds.ratio(LR1)
probabilities1 <- LR1 %>% predict(test.data, type = "response")
predicted.classes1 <- ifelse(probabilities > 0.5, "Won", "Lost")
accuracy <- mean(predicted.classes1 == test.data$Status)
accuracy
error <- mean(predicted.classes != test.data$Status)
error
observed.classes <- test.data$Status
predicted.classes <- as.factor(predicted.classes)
confusionMatrix(predicted.classes, observed.classes, positive = "Won")
confusionMatrix(predicted.classes, observed.classes, positive = "Won")
confusionMatrix(predicted.classes2, observed.classes2, positive = "Won")
## Question 2
LR2 <- glm(Status ~ `Time to Delivery`, data = train.data, family = binomial)
confusionMatrix(predicted.classes, observed.classes, positive = "Won")
predicted.classes
observed.classes
confusionMatrix(predicted.classes$Status, observed.classes, positive = "Won")
observed.classes <- as.factor(test.data$Status)
predicted.classes <- as.factor(predicted.classes)
confusionMatrix(predicted.classes, observed.classes, positive = "Won")
Lost_Sales$Status <- as.factor(Lost_Sales$Status)
set.seed(123)
training.samples <- Lost_Sales$Status %>% createDataPartition(p = 0.8, list = FALSE)
train.data <- Lost_Sales[training.samples, ]
test.data <- Lost_Sales[-training.samples, ]
LR1 <- glm(Status ~ Quote, data = train.data, family = binomial)
summary(LR1)
odds.ratio(LR1)
probabilities1 <- LR1 %>% predict(test.data, type = "response")
predicted.classes1 <- ifelse(probabilities > 0.5, "Won", "Lost")
accuracy <- mean(predicted.classes1 == test.data$Status)
accuracy
error <- mean(predicted.classes != test.data$Status)
error
observed.classes <- as.factor(test.data$Status)
predicted.classes <- as.factor(predicted.classes)
confusionMatrix(predicted.classes, observed.classes, positive = "Won")
predicted.classes
observed.classes
## Question 2
LR2 <- glm(Status ~ `Time to Delivery`, data = train.data, family = binomial)
summary(LR2)
odds.ratio(LR2)
probabilities2 <- LR2 %>% predict(test.data, type = "response")
predicted.classes2 <- ifelse(probabilities2 > 0.5, "Won", "Lost")
accuracy2 <- mean(predicted.classes2 == test.data$Status)
accuracy2
error2 <- mean(predicted.classes2 != test.data$Status)
error2
training.samples2 <- Lost_Sales$Status %>% createDataPartition(p = 0.7, list = FALSE)
train.data2 <- Lost_Sales[training.samples2, ]
test.data2 <- Lost_Sales[-training.samples2, ]
LR3 <- glm(Status ~ Quote + `Time to Delivery` + `Part Type`, data = train.data2, family = binomial)
summary(LR3)
odds.ratio(LR3)
DT1 <- rpart(Status ~ Quote + `Time to Delivery` + `Part Type`, data = train.data2, method ="class")
library(rpart)
DT1 <- rpart(Status ~ Quote + `Time to Delivery` + `Part Type`, data = train.data2, method ="class")
predicted.classes3 <- DT1 %>% predict(test.data2, type = "class")
mean(predicted.classes3 == test.data2$Status)
mean(predicted.classes3 != test.data2$Status)
R2(predicted.classes3, test.data2)
R2(predicted.classes3, test.data2$Status)
#Training
DT1 <- rpart(Status ~ Quote + `Time to Delivery` + `Part Type`, data = train.data2, method ="class")
predicted.classes3 <- DT1 %>% predict(train.data2, type = "class")
R2(predicted.classes3, train.data2$Status)
mean(predicted.classes3 == train.data2$Status)
mean(predicted.classes3 != train.data2$Status)
#Test
DT2 <- rpart(Status ~ Quote + `Time to Delivery` + `Part Type`, data = test.data2, method ="class")
predicted.classes3 <- DT1 %>% predict(test.data2, type = "class")
R2(predicted.classes3, test.data2$Status)
mean(predicted.classes3 == test.data2$Status)
mean(predicted.classes3 != test.data2$Status)
R2(DT1)
R2(DT1, predicted.classes3)
R2(DT1, data = train.data2)
R2(DT1, test.data2)
predicted.classes3 <- DT1 %>% predict(test.data2, type = "class")
R2(DT1, test.data2)
eval_results
eval_results <- function(true, predicted, df) {
SSE <- sum((predicted - true)^2)
SST <- sum((true - mean(true))^2)
R_square <- 1 - SSE / SST
RMSE = sqrt(SSE/nrow(df))
}
eval_results(test.data2$Status, predicted.classes4, test.data2)
predicted.classes4 <- DT1 %>% predict(test.data2, type = "class")
eval_results(test.data2$Status, predicted.classes4, test.data2)
eval_results(train.data2$Status, predicted.classes3, train.data2)
R2(predicted.classes3, train.data2$Status)
R2(predicted.classes3)
R2(DT1)
predicted.classes4 <- DT1 %>% predict(test.data2, type = "class")
mean(predicted.classes3 == test.data2$Status)
mean(predicted.classes3 != test.data2$Status)
table(predicted.classes4)
table(predicted.classes4, test.data2$Status)
DT2 <- rpart(Status ~ Quote + `Time to Delivery` + `Part Type`, data = train.data,
method = "rpart", trainControl("cv", number = 10), tuneLength = 10)
DT2 <- rpart(Status ~ Quote + `Time to Delivery` + `Part Type`, data = train.data2,
method = "rpart", trainControl("cv", number = 10), tuneLength = 10)
DT2 <- rpart(Status ~ Quote + `Time to Delivery` + `Part Type`, data = train.data2,
method = "rpart", trControl = trainControl("cv", number = 10), tuneLength = 10)
DT2 <- train(Status ~ Quote + `Time to Delivery` + `Part Type`, data = train.data2,
method = "rpart", trControl = trainControl("cv", number = 10), tuneLength = 10)
DT2 <- train(Status ~ Quote + `Time to Delivery` + `Part Type`, data = train.data2,
method = "rpart", trControl = trainControl("cv", number = 10), tuneLength = 10)
DT2 <- train(Status ~ ., data = train.data2,
method = "rpart", trControl = trainControl("cv", number = 10), tuneLength = 10)
##Trained DT
train.data2 <- train.data2 %>% rename(`Time to Delivery` = ToD)
##Trained DT
train.data2 <- train.data2 %>% rename(Time_to_Delivery=`Time to Delivery`)
train.data2 <- train.data2 %>% rename(Part_Type=`Part Type`)
DT2 <- train(Status ~ Quote + Time_to_Delivery + Part_Type, data = train.data2,
method = "rpart", trControl = trainControl("cv", number = 10), tuneLength = 10)
DT2$bestTune
plot(DT2)
DT2$finalModel
plot(DT2$finalModel)
mean(predicted.classes4 == test.data2$Status)
mean(predicted.classes4 != test.data2$Status)
predicted.classes5 <- DT2 %>% predict(test.data2, type = "class")
predicted.classes5 <- DT2 %>% predict(test.data2)
test.data2 <- test.data2 %>% rename(Time_to_Delivery=`Time to Delivery`)
test.data2 <- test.data2 %>% rename(Part_Type=`Part Type`)
##calc accuracy and error
predicted.classes5 <- DT2 %>% predict(test.data2)
mean(predicted.classes5 == test.data2$Status)
mean(predicted.classes5 != test.data2$Status)
##calc accuracy and error
predicted.classes5 <- DT2 %>% predict(test.data2)
mean(predicted.classes5 == test.data2$Status)
mean(predicted.classes5 != test.data2$Status)
library(readr)
library(tidyverse)
library(dplyr)
library(caret)
library(questionr)
library(rpart)
Lost_Sales <- read_csv("Lost Sales.csv")
Lost_Sales$Status <- as.factor(Lost_Sales$Status)
set.seed(123)
training.samples <- Lost_Sales$Status %>% createDataPartition(p = 0.8, list = FALSE)
train.data <- Lost_Sales[training.samples, ]
test.data <- Lost_Sales[-training.samples, ]
LR1 <- glm(Status ~ Quote, data = train.data, family = binomial)
summary(LR1)
